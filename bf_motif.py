#!/usr/bin/env python3

"""
    MotifEnumeration(Dna, k, d) = dna is a list, k is an integer, and d is an integer
        Patterns ← an empty set = this set will hold all the kmers that are common among all neighbors generated by each kmer.
        for each k-mer Pattern in Dna = for each sequence of dna in the dna list, generate all the kmers for each one and put them in a list
            for each k-mer Pattern’ differing from Pattern by at most d mismatches = generate all kmers with d mismatches for all kmers associated with each sequence
                if Pattern' appears in each string from Dna with at most d ﻿mismatches = if the kmer is common among all sequences add it to the patterns set
                    add Pattern' to Patterns
        return Patterns
"""

import neighbors
import sys
import hd
import approxpatterncount as apc

Dna = ['ATTTGGC', 'TGCCTTA', 'CGGTATC', 'GAAAATT']
#dna = 'ATTTGGC'
k = 3
d = 1

"""
Answer to the above variables; ATA ATT GTT TTT
"""

"""
Generates and returns a list of k_mers for a given sequence.
"""

def generate_kmers(dna, k):
    list_of_generated_kmers = []
    for i in range(len(dna) - k + 1):
        list_of_generated_kmers.append(dna[i:i+k])
    return list_of_generated_kmers

"""
Generates motifs common between multiple sequence strings
with d-mismatches (SNPs) of their k-mers.
"""

def motif_enumeration(Dna, k, d):
    k_mers_list = []
    k_mer_neighbor_list = []

    for k_mer in Dna: #generates a list of list of k-mers for each sequence in a list.
        k_mers_list.append(generate_kmers(k_mer, k))

    for dna_list in k_mers_list: #generates a list of k-mers with d-mismatches from the list of all k-mers for a sequence.
         for seq in dna_list:
            k_mer_neighbor_list.append(neighbors.recursive_neighbors(seq, d))

    #k_mer_tuple_of_sets = tuple(set(row) for row in k_mer_neighbor_list)
    #k_mer_intersection = set(k_mer_tuple_of_sets[0]).intersection(*k_mer_tuple_of_sets)
    k_mer_intersection = [set.intersection(*map(set, k_mer_neighbor_list))]

    return k_mer_intersection

print(motif_enumeration(Dna, k, d))
